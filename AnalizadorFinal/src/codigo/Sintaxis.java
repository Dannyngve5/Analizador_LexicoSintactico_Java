
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 29 14:29:24 COT 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 29 14:29:24 COT 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\304\000\002\002\004\000\002\013\011\000\002\013" +
    "\011\000\002\013\007\000\002\013\007\000\002\013\006" +
    "\000\002\013\005\000\002\013\007\000\002\013\006\000" +
    "\002\013\012\000\002\013\012\000\002\013\010\000\002" +
    "\013\010\000\002\002\016\000\002\002\012\000\002\002" +
    "\011\000\002\002\010\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\005\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\012\005\000" +
    "\002\012\007\000\002\012\006\000\002\012\010\000\002" +
    "\012\007\000\002\012\011\000\002\012\005\000\002\012" +
    "\005\000\002\012\007\000\002\012\007\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\030\005\000" +
    "\002\030\003\000\002\030\007\000\002\030\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\032" +
    "\013\000\002\032\011\000\002\032\014\000\002\032\012" +
    "\000\002\032\010\000\002\032\006\000\002\004\005\000" +
    "\002\004\006\000\002\004\006\000\002\004\007\000\002" +
    "\004\006\000\002\004\006\000\002\004\007\000\002\004" +
    "\006\000\002\004\007\000\002\004\005\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\004\006\000\002\004\005\000\002\004\006\000\002" +
    "\004\006\000\002\004\005\000\002\004\005\000\002\004" +
    "\004\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\010\005\000\002" +
    "\010\004\000\002\010\005\000\002\007\006\000\002\007" +
    "\005\000\002\007\006\000\002\007\007\000\002\007\005" +
    "\000\002\007\006\000\002\007\004\000\002\014\003\000" +
    "\002\014\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\005\011\000\002\005" +
    "\015\000\002\005\013\000\002\015\006\000\002\015\003" +
    "\000\002\015\005\000\002\033\003\000\002\033\004\000" +
    "\002\033\006\000\002\033\006\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\007\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\007\000\002\016\007\000\002\016\007\000\002\006\015" +
    "\000\002\017\011\000\002\020\013\000\002\022\006\000" +
    "\002\023\003\000\002\023\005\000\002\023\006\000\002" +
    "\023\004\000\002\023\007\000\002\023\006\000\002\023" +
    "\005\000\002\023\003\000\002\025\003\000\002\025\005" +
    "\000\002\024\006\000\002\037\004\000\002\026\010\000" +
    "\002\026\012\000\002\026\011\000\002\026\010\000\002" +
    "\026\011\000\002\026\013\000\002\026\011\000\002\026" +
    "\012\000\002\027\016\000\002\027\014\000\002\027\011" +
    "\000\002\034\005\000\002\034\005\000\002\035\010\000" +
    "\002\035\012\000\002\036\010\000\002\040\013\000\002" +
    "\040\011\000\002\041\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ed\000\010\005\006\025\010\106\005\001\002\000" +
    "\010\005\u01cd\025\u01ce\117\u01cc\001\002\000\004\100\u01c7" +
    "\001\002\000\006\006\u01b7\007\u01b6\001\002\000\004\002" +
    "\u01b5\001\002\000\004\106\011\001\002\000\004\100\012" +
    "\001\002\000\004\101\013\001\002\000\004\102\014\001" +
    "\002\000\070\013\047\014\061\015\055\017\051\020\017" +
    "\021\041\022\043\023\023\025\037\026\033\030\035\031" +
    "\057\033\070\034\022\035\064\036\045\037\066\040\024" +
    "\041\036\042\042\074\015\075\026\113\067\114\016\115" +
    "\065\116\030\123\063\001\002\000\004\123\063\001\002" +
    "\000\004\100\u01b0\001\002\000\004\123\072\001\002\000" +
    "\074\011\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\025\uffd3\026\uffd3\030\uffd3\031" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\074\uffd3\075\uffd3\103\uffd3\113\uffd3\114" +
    "\uffd3\115\uffd3\116\uffd3\123\uffd3\001\002\000\004\107\u01ad" +
    "\001\002\000\012\013\u019f\025\u01a2\026\u01a0\031\u01a1\001" +
    "\002\000\004\100\u0194\001\002\000\004\123\u018c\001\002" +
    "\000\072\013\047\014\061\015\055\017\051\020\017\021" +
    "\041\022\043\023\023\025\037\026\033\030\035\031\057" +
    "\033\070\034\022\035\064\036\045\037\066\040\024\041" +
    "\036\042\042\074\015\075\026\103\u018b\113\067\114\016" +
    "\115\065\116\030\123\063\001\002\000\004\123\063\001" +
    "\002\000\074\011\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\025\uffdf\026\uffdf\030" +
    "\uffdf\031\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\074\uffdf\075\uffdf\103\uffdf\113" +
    "\uffdf\114\uffdf\115\uffdf\116\uffdf\123\uffdf\001\002\000\004" +
    "\065\u0179\001\002\000\074\011\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb" +
    "\026\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\074\uffeb\075\uffeb" +
    "\103\uffeb\113\uffeb\114\uffeb\115\uffeb\116\uffeb\123\uffeb\001" +
    "\002\000\074\011\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7\026\uffe7\030" +
    "\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\074\uffe7\075\uffe7\103\uffe7\113" +
    "\uffe7\114\uffe7\115\uffe7\116\uffe7\123\uffe7\001\002\000\006" +
    "\020\u0173\025\u0174\001\002\000\004\107\u0172\001\002\000" +
    "\006\123\u016f\124\u016e\001\002\000\004\100\u0168\001\002" +
    "\000\004\123\363\001\002\000\074\011\uffed\013\uffed\014" +
    "\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\025\uffed\026\uffed\030\uffed\031\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\074\uffed" +
    "\075\uffed\103\uffed\113\uffed\114\uffed\115\uffed\116\uffed\123" +
    "\uffed\001\002\000\004\123\072\001\002\000\004\123\363" +
    "\001\002\000\004\100\u014d\001\002\000\074\011\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\074\uffd7\075\uffd7\103\uffd7\113\uffd7\114\uffd7\115\uffd7\116" +
    "\uffd7\123\uffd7\001\002\000\004\100\u0112\001\002\000\074" +
    "\011\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\025\uffe1\026\uffe1\030\uffe1\031\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\074\uffe1\075\uffe1\103\uffe1\113\uffe1\114\uffe1" +
    "\115\uffe1\116\uffe1\123\uffe1\001\002\000\004\123\363\001" +
    "\002\000\074\011\uffd9\013\uffd9\014\uffd9\015\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\025\uffd9\026\uffd9\030" +
    "\uffd9\031\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\074\uffd9\075\uffd9\103\uffd9\113" +
    "\uffd9\114\uffd9\115\uffd9\116\uffd9\123\uffd9\001\002\000\004" +
    "\102\266\001\002\000\074\011\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\025\uffd5" +
    "\026\uffd5\030\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\074\uffd5\075\uffd5" +
    "\103\uffd5\113\uffd5\114\uffd5\115\uffd5\116\uffd5\123\uffd5\001" +
    "\002\000\074\011\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\025\uffdd\026\uffdd\030" +
    "\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\074\uffdd\075\uffdd\103\uffdd\113" +
    "\uffdd\114\uffdd\115\uffdd\116\uffdd\123\uffdd\001\002\000\022" +
    "\044\236\067\235\070\234\071\227\072\231\073\232\074" +
    "\230\075\233\001\002\000\004\107\226\001\002\000\074" +
    "\011\uffef\013\uffef\014\uffef\015\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\025\uffef\026\uffef\030\uffef\031\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041" +
    "\uffef\042\uffef\074\uffef\075\uffef\103\uffef\113\uffef\114\uffef" +
    "\115\uffef\116\uffef\123\uffef\001\002\000\004\025\223\001" +
    "\002\000\074\011\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\025\uffe3\026\uffe3\030" +
    "\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\074\uffe3\075\uffe3\103\uffe3\113" +
    "\uffe3\114\uffe3\115\uffe3\116\uffe3\123\uffe3\001\002\000\012" +
    "\013\207\020\210\021\211\025\212\001\002\000\074\011" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\074\uffe9\075\uffe9\103\uffe9\113\uffe9\114\uffe9\115" +
    "\uffe9\116\uffe9\123\uffe9\001\002\000\100\043\uff78\044\uff78" +
    "\045\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053" +
    "\uff78\055\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062\uff78" +
    "\063\uff78\064\uff78\065\uff78\066\uff78\067\uff78\070\uff78\071" +
    "\uff78\072\uff78\073\uff78\074\uff78\075\uff78\101\uff78\104\201" +
    "\107\uff78\111\uff78\123\063\001\002\000\004\123\154\001" +
    "\002\000\004\066\146\001\002\000\010\020\134\025\136" +
    "\034\135\001\002\000\004\100\122\001\002\000\004\123" +
    "\072\001\002\000\074\011\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\025\uffdb\026" +
    "\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\074\uffdb\075\uffdb\103" +
    "\uffdb\113\uffdb\114\uffdb\115\uffdb\116\uffdb\123\uffdb\001\002" +
    "\000\012\044\076\101\uffc6\107\uffc6\112\075\001\002\000" +
    "\004\107\074\001\002\000\074\011\uffa5\013\uffa5\014\uffa5" +
    "\015\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\025" +
    "\uffa5\026\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\074\uffa5\075" +
    "\uffa5\103\uffa5\113\uffa5\114\uffa5\115\uffa5\116\uffa5\123\uffa5" +
    "\001\002\000\004\123\072\001\002\000\014\043\101\076" +
    "\102\077\100\123\103\124\077\001\002\000\010\101\uffd2" +
    "\107\uffd2\112\117\001\002\000\010\101\uffc7\107\uffc7\112" +
    "\115\001\002\000\006\043\106\123\107\001\002\000\010" +
    "\101\uffc8\107\uffc8\112\104\001\002\000\006\101\uffcb\107" +
    "\uffcb\001\002\000\004\123\072\001\002\000\006\101\uffca" +
    "\107\uffca\001\002\000\010\101\uffd0\107\uffd0\112\113\001" +
    "\002\000\004\043\110\001\002\000\010\101\uffce\107\uffce" +
    "\112\111\001\002\000\004\123\072\001\002\000\006\101" +
    "\uffcd\107\uffcd\001\002\000\004\123\072\001\002\000\006" +
    "\101\uffcf\107\uffcf\001\002\000\004\123\072\001\002\000" +
    "\006\101\uffc9\107\uffc9\001\002\000\004\123\072\001\002" +
    "\000\006\101\uffd1\107\uffd1\001\002\000\006\101\uffcc\107" +
    "\uffcc\001\002\000\004\043\123\001\002\000\004\123\063" +
    "\001\002\000\004\043\125\001\002\000\006\101\126\112" +
    "\127\001\002\000\004\107\133\001\002\000\004\123\130" +
    "\001\002\000\004\101\131\001\002\000\004\107\132\001" +
    "\002\000\074\011\uff40\013\uff40\014\uff40\015\uff40\017\uff40" +
    "\020\uff40\021\uff40\022\uff40\023\uff40\025\uff40\026\uff40\030" +
    "\uff40\031\uff40\033\uff40\034\uff40\035\uff40\036\uff40\037\uff40" +
    "\040\uff40\041\uff40\042\uff40\074\uff40\075\uff40\103\uff40\113" +
    "\uff40\114\uff40\115\uff40\116\uff40\123\uff40\001\002\000\074" +
    "\011\uff3f\013\uff3f\014\uff3f\015\uff3f\017\uff3f\020\uff3f\021" +
    "\uff3f\022\uff3f\023\uff3f\025\uff3f\026\uff3f\030\uff3f\031\uff3f" +
    "\033\uff3f\034\uff3f\035\uff3f\036\uff3f\037\uff3f\040\uff3f\041" +
    "\uff3f\042\uff3f\074\uff3f\075\uff3f\103\uff3f\113\uff3f\114\uff3f" +
    "\115\uff3f\116\uff3f\123\uff3f\001\002\000\004\123\072\001" +
    "\002\000\004\025\141\001\002\000\004\123\072\001\002" +
    "\000\004\107\140\001\002\000\074\011\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\025\uffb7\026\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\074\uffb7" +
    "\075\uffb7\103\uffb7\113\uffb7\114\uffb7\115\uffb7\116\uffb7\123" +
    "\uffb7\001\002\000\004\123\072\001\002\000\004\107\143" +
    "\001\002\000\074\011\uffb5\013\uffb5\014\uffb5\015\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\025\uffb5\026\uffb5" +
    "\030\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\074\uffb5\075\uffb5\103\uffb5" +
    "\113\uffb5\114\uffb5\115\uffb5\116\uffb5\123\uffb5\001\002\000" +
    "\004\107\145\001\002\000\074\011\uffae\013\uffae\014\uffae" +
    "\015\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\025" +
    "\uffae\026\uffae\030\uffae\031\uffae\033\uffae\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\074\uffae\075" +
    "\uffae\103\uffae\113\uffae\114\uffae\115\uffae\116\uffae\123\uffae" +
    "\001\002\000\004\123\063\001\002\000\006\066\152\107" +
    "\uff54\001\002\000\004\107\151\001\002\000\074\011\uff52" +
    "\013\uff52\014\uff52\015\uff52\017\uff52\020\uff52\021\uff52\022" +
    "\uff52\023\uff52\025\uff52\026\uff52\030\uff52\031\uff52\033\uff52" +
    "\034\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041\uff52\042" +
    "\uff52\074\uff52\075\uff52\103\uff52\113\uff52\114\uff52\115\uff52" +
    "\116\uff52\123\uff52\001\002\000\004\123\063\001\002\000" +
    "\004\107\uff53\001\002\000\004\102\155\001\002\000\070" +
    "\013\047\014\061\015\055\017\051\020\017\021\041\022" +
    "\043\023\023\025\037\026\033\030\035\031\057\033\070" +
    "\034\022\035\064\036\045\037\066\040\024\041\036\042" +
    "\042\074\015\075\026\113\067\114\016\115\065\116\030" +
    "\123\063\001\002\000\072\013\047\014\061\015\055\017" +
    "\051\020\017\021\041\022\043\023\023\025\037\026\033" +
    "\030\035\031\057\033\070\034\022\035\064\036\045\037" +
    "\066\040\024\041\036\042\042\074\015\075\026\103\157" +
    "\113\067\114\016\115\065\116\030\123\063\001\002\000" +
    "\004\107\200\001\002\000\074\011\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\025" +
    "\uffd4\026\uffd4\030\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\074\uffd4\075" +
    "\uffd4\103\uffd4\113\uffd4\114\uffd4\115\uffd4\116\uffd4\123\uffd4" +
    "\001\002\000\074\011\uffe0\013\uffe0\014\uffe0\015\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0" +
    "\030\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\074\uffe0\075\uffe0\103\uffe0" +
    "\113\uffe0\114\uffe0\115\uffe0\116\uffe0\123\uffe0\001\002\000" +
    "\074\011\uffec\013\uffec\014\uffec\015\uffec\017\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\025\uffec\026\uffec\030\uffec\031" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\042\uffec\074\uffec\075\uffec\103\uffec\113\uffec\114" +
    "\uffec\115\uffec\116\uffec\123\uffec\001\002\000\074\011\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\074\uffe8\075\uffe8\103\uffe8\113\uffe8\114\uffe8\115\uffe8" +
    "\116\uffe8\123\uffe8\001\002\000\004\107\177\001\002\000" +
    "\074\011\uffee\013\uffee\014\uffee\015\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\025\uffee\026\uffee\030\uffee\031" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\074\uffee\075\uffee\103\uffee\113\uffee\114" +
    "\uffee\115\uffee\116\uffee\123\uffee\001\002\000\074\011\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\074\uffd8\075\uffd8\103\uffd8\113\uffd8\114\uffd8\115\uffd8" +
    "\116\uffd8\123\uffd8\001\002\000\074\011\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\025\uffe2\026\uffe2\030\uffe2\031\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\074\uffe2" +
    "\075\uffe2\103\uffe2\113\uffe2\114\uffe2\115\uffe2\116\uffe2\123" +
    "\uffe2\001\002\000\074\011\uffda\013\uffda\014\uffda\015\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\025\uffda\026" +
    "\uffda\030\uffda\031\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\074\uffda\075\uffda\103" +
    "\uffda\113\uffda\114\uffda\115\uffda\116\uffda\123\uffda\001\002" +
    "\000\074\011\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\025\uffd6\026\uffd6\030\uffd6" +
    "\031\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\074\uffd6\075\uffd6\103\uffd6\113\uffd6" +
    "\114\uffd6\115\uffd6\116\uffd6\123\uffd6\001\002\000\074\011" +
    "\uffde\013\uffde\014\uffde\015\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\025\uffde\026\uffde\030\uffde\031\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\074\uffde\075\uffde\103\uffde\113\uffde\114\uffde\115" +
    "\uffde\116\uffde\123\uffde\001\002\000\074\011\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\025\ufff0\026\ufff0\030\ufff0\031\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\074" +
    "\ufff0\075\ufff0\103\ufff0\113\ufff0\114\ufff0\115\ufff0\116\ufff0" +
    "\123\ufff0\001\002\000\074\011\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\025\uffe4" +
    "\026\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\074\uffe4\075\uffe4" +
    "\103\uffe4\113\uffe4\114\uffe4\115\uffe4\116\uffe4\123\uffe4\001" +
    "\002\000\074\011\uffea\013\uffea\014\uffea\015\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\025\uffea\026\uffea\030" +
    "\uffea\031\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\074\uffea\075\uffea\103\uffea\113" +
    "\uffea\114\uffea\115\uffea\116\uffea\123\uffea\001\002\000\074" +
    "\011\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\025\uffdc\026\uffdc\030\uffdc\031\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\074\uffdc\075\uffdc\103\uffdc\113\uffdc\114\uffdc" +
    "\115\uffdc\116\uffdc\123\uffdc\001\002\000\074\011\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\074\uffe6\075\uffe6\103\uffe6\113\uffe6\114\uffe6\115\uffe6\116" +
    "\uffe6\123\uffe6\001\002\000\074\011\uff41\013\uff41\014\uff41" +
    "\015\uff41\017\uff41\020\uff41\021\uff41\022\uff41\023\uff41\025" +
    "\uff41\026\uff41\030\uff41\031\uff41\033\uff41\034\uff41\035\uff41" +
    "\036\uff41\037\uff41\040\uff41\041\uff41\042\uff41\074\uff41\075" +
    "\uff41\103\uff41\113\uff41\114\uff41\115\uff41\116\uff41\123\uff41" +
    "\001\002\000\006\123\204\124\203\001\002\000\074\043" +
    "\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77" +
    "\052\uff77\053\uff77\055\uff77\056\uff77\057\uff77\060\uff77\061" +
    "\uff77\062\uff77\063\uff77\064\uff77\065\uff77\066\uff77\067\uff77" +
    "\070\uff77\071\uff77\072\uff77\073\uff77\074\uff77\075\uff77\101" +
    "\uff77\107\uff77\111\uff77\001\002\000\004\105\206\001\002" +
    "\000\004\105\205\001\002\000\074\043\uff75\044\uff75\045" +
    "\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75" +
    "\055\uff75\056\uff75\057\uff75\060\uff75\061\uff75\062\uff75\063" +
    "\uff75\064\uff75\065\uff75\066\uff75\067\uff75\070\uff75\071\uff75" +
    "\072\uff75\073\uff75\074\uff75\075\uff75\101\uff75\107\uff75\111" +
    "\uff75\001\002\000\074\043\uff76\044\uff76\045\uff76\046\uff76" +
    "\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76\055\uff76\056" +
    "\uff76\057\uff76\060\uff76\061\uff76\062\uff76\063\uff76\064\uff76" +
    "\065\uff76\066\uff76\067\uff76\070\uff76\071\uff76\072\uff76\073" +
    "\uff76\074\uff76\075\uff76\101\uff76\107\uff76\111\uff76\001\002" +
    "\000\004\123\072\001\002\000\004\123\072\001\002\000" +
    "\004\123\072\001\002\000\004\123\072\001\002\000\004" +
    "\107\214\001\002\000\074\011\uffb4\013\uffb4\014\uffb4\015" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\025\uffb4" +
    "\026\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\074\uffb4\075\uffb4" +
    "\103\uffb4\113\uffb4\114\uffb4\115\uffb4\116\uffb4\123\uffb4\001" +
    "\002\000\004\107\216\001\002\000\074\011\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\025\uffaa\026\uffaa\030\uffaa\031\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\074" +
    "\uffaa\075\uffaa\103\uffaa\113\uffaa\114\uffaa\115\uffaa\116\uffaa" +
    "\123\uffaa\001\002\000\004\107\220\001\002\000\074\011" +
    "\uffad\013\uffad\014\uffad\015\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\023\uffad\025\uffad\026\uffad\030\uffad\031\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\074\uffad\075\uffad\103\uffad\113\uffad\114\uffad\115" +
    "\uffad\116\uffad\123\uffad\001\002\000\004\107\222\001\002" +
    "\000\074\011\uffa8\013\uffa8\014\uffa8\015\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\025\uffa8\026\uffa8\030\uffa8" +
    "\031\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\074\uffa8\075\uffa8\103\uffa8\113\uffa8" +
    "\114\uffa8\115\uffa8\116\uffa8\123\uffa8\001\002\000\004\123" +
    "\072\001\002\000\004\107\225\001\002\000\074\011\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\017\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\025\uffb3\026\uffb3\030\uffb3\031\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\074\uffb3\075\uffb3\103\uffb3\113\uffb3\114\uffb3\115\uffb3" +
    "\116\uffb3\123\uffb3\001\002\000\074\011\uff51\013\uff51\014" +
    "\uff51\015\uff51\017\uff51\020\uff51\021\uff51\022\uff51\023\uff51" +
    "\025\uff51\026\uff51\030\uff51\031\uff51\033\uff51\034\uff51\035" +
    "\uff51\036\uff51\037\uff51\040\uff51\041\uff51\042\uff51\074\uff51" +
    "\075\uff51\103\uff51\113\uff51\114\uff51\115\uff51\116\uff51\123" +
    "\uff51\001\002\000\006\123\063\124\264\001\002\000\006" +
    "\101\uff72\107\uff72\001\002\000\006\123\063\124\262\001" +
    "\002\000\006\123\063\124\260\001\002\000\006\101\uff71" +
    "\107\uff71\001\002\000\006\123\063\124\256\001\002\000" +
    "\006\123\063\124\254\001\002\000\006\123\063\124\237" +
    "\001\002\000\020\045\245\046\244\047\246\050\241\051" +
    "\242\101\uff64\107\uff64\001\002\000\020\045\245\046\244" +
    "\047\246\050\241\051\242\101\uff6b\107\uff6b\001\002\000" +
    "\006\123\uffa0\124\uffa0\001\002\000\006\123\uff9f\124\uff9f" +
    "\001\002\000\006\123\063\124\247\001\002\000\006\123" +
    "\uffa2\124\uffa2\001\002\000\006\123\uffa3\124\uffa3\001\002" +
    "\000\006\123\uffa1\124\uffa1\001\002\000\006\101\uff62\107" +
    "\uff62\001\002\000\006\101\uff6a\107\uff6a\001\002\000\006" +
    "\123\063\124\252\001\002\000\006\101\uff61\107\uff61\001" +
    "\002\000\006\101\uff63\107\uff63\001\002\000\006\101\uff69" +
    "\107\uff69\001\002\000\006\101\uff70\107\uff70\001\002\000" +
    "\006\101\uff68\107\uff68\001\002\000\006\101\uff6f\107\uff6f" +
    "\001\002\000\006\101\uff65\107\uff65\001\002\000\006\101" +
    "\uff6c\107\uff6c\001\002\000\006\101\uff66\107\uff66\001\002" +
    "\000\006\101\uff6d\107\uff6d\001\002\000\006\101\uff67\107" +
    "\uff67\001\002\000\006\101\uff6e\107\uff6e\001\002\000\070" +
    "\013\047\014\061\015\055\017\051\020\017\021\041\022" +
    "\043\023\023\025\037\026\033\030\035\031\057\033\070" +
    "\034\022\035\064\036\045\037\066\040\024\041\036\042" +
    "\042\074\015\075\026\113\067\114\016\115\065\116\030" +
    "\123\063\001\002\000\072\013\047\014\061\015\055\017" +
    "\051\020\017\021\041\022\043\023\023\025\037\026\033" +
    "\030\035\031\057\033\070\034\022\035\064\036\045\037" +
    "\066\040\024\041\036\042\042\074\015\075\026\103\270" +
    "\113\067\114\016\115\065\116\030\123\063\001\002\000" +
    "\004\041\271\001\002\000\004\100\272\001\002\000\020" +
    "\043\304\054\275\076\300\077\276\100\277\123\063\124" +
    "\302\001\002\000\012\052\356\053\357\101\uff84\107\uff84" +
    "\001\002\000\004\101\354\001\002\000\016\043\304\076" +
    "\300\077\276\100\344\123\063\124\302\001\002\000\032" +
    "\052\uff95\053\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061" +
    "\uff95\062\uff95\063\uff95\064\uff95\101\uff95\107\uff95\001\002" +
    "\000\020\043\304\054\275\076\300\077\276\100\277\123" +
    "\063\124\302\001\002\000\032\052\uff96\053\uff96\055\uff96" +
    "\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064" +
    "\uff96\101\uff96\107\uff96\001\002\000\044\045\245\046\244" +
    "\047\246\050\241\051\242\052\uff94\053\uff94\055\uff94\056" +
    "\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94" +
    "\101\uff94\107\uff94\001\002\000\044\045\245\046\244\047" +
    "\246\050\241\051\242\052\uff8f\053\uff8f\055\uff8f\056\uff8f" +
    "\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\101" +
    "\uff8f\107\uff8f\001\002\000\032\052\313\053\312\055\311" +
    "\056\322\057\315\060\317\061\316\062\314\063\321\064" +
    "\320\101\uff83\107\uff83\001\002\000\006\043\305\123\306" +
    "\001\002\000\032\052\uff8d\053\uff8d\055\uff8d\056\uff8d\057" +
    "\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\101\uff8d" +
    "\107\uff8d\001\002\000\004\043\307\001\002\000\032\052" +
    "\uff8e\053\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e" +
    "\062\uff8e\063\uff8e\064\uff8e\101\uff8e\107\uff8e\001\002\000" +
    "\020\043\304\054\325\076\300\077\276\100\326\123\063" +
    "\124\302\001\002\000\020\043\uff97\054\uff97\076\uff97\077" +
    "\uff97\100\uff97\123\uff97\124\uff97\001\002\000\020\043\304" +
    "\054\275\076\300\077\276\100\277\123\063\124\302\001" +
    "\002\000\020\043\304\054\275\076\300\077\276\100\277" +
    "\123\063\124\302\001\002\000\020\043\uff9b\054\uff9b\076" +
    "\uff9b\077\uff9b\100\uff9b\123\uff9b\124\uff9b\001\002\000\020" +
    "\043\uff9c\054\uff9c\076\uff9c\077\uff9c\100\uff9c\123\uff9c\124" +
    "\uff9c\001\002\000\020\043\uff9a\054\uff9a\076\uff9a\077\uff9a" +
    "\100\uff9a\123\uff9a\124\uff9a\001\002\000\020\043\uff99\054" +
    "\uff99\076\uff99\077\uff99\100\uff99\123\uff99\124\uff99\001\002" +
    "\000\020\043\uff9d\054\uff9d\076\uff9d\077\uff9d\100\uff9d\123" +
    "\uff9d\124\uff9d\001\002\000\020\043\uff9e\054\uff9e\076\uff9e" +
    "\077\uff9e\100\uff9e\123\uff9e\124\uff9e\001\002\000\020\043" +
    "\uff98\054\uff98\076\uff98\077\uff98\100\uff98\123\uff98\124\uff98" +
    "\001\002\000\006\101\uff80\107\uff80\001\002\000\006\101" +
    "\uff7f\107\uff7f\001\002\000\016\043\304\076\300\077\276" +
    "\100\326\123\063\124\302\001\002\000\016\043\304\076" +
    "\300\077\276\100\326\123\063\124\302\001\002\000\012" +
    "\052\uff8a\053\uff8a\101\uff8a\107\uff8a\001\002\000\004\101" +
    "\331\001\002\000\032\052\uff8c\053\uff8c\055\uff8c\056\uff8c" +
    "\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\101" +
    "\uff8c\107\uff8c\001\002\000\012\052\uff89\053\uff89\101\uff89" +
    "\107\uff89\001\002\000\006\123\063\124\334\001\002\000" +
    "\032\052\uff90\053\uff90\055\uff90\056\uff90\057\uff90\060\uff90" +
    "\061\uff90\062\uff90\063\uff90\064\uff90\101\uff90\107\uff90\001" +
    "\002\000\032\052\uff91\053\uff91\055\uff91\056\uff91\057\uff91" +
    "\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\101\uff91\107" +
    "\uff91\001\002\000\006\123\063\124\337\001\002\000\032" +
    "\052\uff92\053\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\064\uff92\101\uff92\107\uff92\001\002" +
    "\000\032\052\uff93\053\uff93\055\uff93\056\uff93\057\uff93\060" +
    "\uff93\061\uff93\062\uff93\063\uff93\064\uff93\101\uff93\107\uff93" +
    "\001\002\000\004\101\343\001\002\000\024\055\311\056" +
    "\322\057\315\060\317\061\316\062\314\063\321\064\320" +
    "\101\331\001\002\000\012\052\uff87\053\uff87\101\uff87\107" +
    "\uff87\001\002\000\020\043\304\054\275\076\300\077\276" +
    "\100\277\123\063\124\302\001\002\000\032\052\uff85\053" +
    "\uff85\055\311\056\322\057\315\060\317\061\316\062\314" +
    "\063\321\064\320\101\uff85\107\uff85\001\002\000\020\043" +
    "\304\054\347\076\300\077\276\100\326\123\063\124\302" +
    "\001\002\000\016\043\304\076\300\077\276\100\326\123" +
    "\063\124\302\001\002\000\012\052\uff8b\053\uff8b\101\uff8b" +
    "\107\uff8b\001\002\000\012\052\uff88\053\uff88\101\uff88\107" +
    "\uff88\001\002\000\004\101\353\001\002\000\012\052\uff86" +
    "\053\uff86\101\uff86\107\uff86\001\002\000\004\107\355\001" +
    "\002\000\074\011\uff5e\013\uff5e\014\uff5e\015\uff5e\017\uff5e" +
    "\020\uff5e\021\uff5e\022\uff5e\023\uff5e\025\uff5e\026\uff5e\030" +
    "\uff5e\031\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e\037\uff5e" +
    "\040\uff5e\041\uff5e\042\uff5e\074\uff5e\075\uff5e\103\uff5e\113" +
    "\uff5e\114\uff5e\115\uff5e\116\uff5e\123\uff5e\001\002\000\020" +
    "\043\304\054\275\076\300\077\276\100\277\123\063\124" +
    "\302\001\002\000\020\043\304\054\275\076\300\077\276" +
    "\100\277\123\063\124\302\001\002\000\006\101\uff81\107" +
    "\uff81\001\002\000\006\101\uff82\107\uff82\001\002\000\004" +
    "\107\u0111\001\002\000\012\044\076\104\366\107\uffc6\112" +
    "\075\001\002\000\004\107\365\001\002\000\074\011\uffa9" +
    "\013\uffa9\014\uffa9\015\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\025\uffa9\026\uffa9\030\uffa9\031\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\074\uffa9\075\uffa9\103\uffa9\113\uffa9\114\uffa9\115\uffa9" +
    "\116\uffa9\123\uffa9\001\002\000\006\105\370\124\367\001" +
    "\002\000\004\105\u0108\001\002\000\004\044\371\001\002" +
    "\000\004\102\372\001\002\000\006\043\374\124\373\001" +
    "\002\000\006\103\uffc4\112\u0106\001\002\000\004\123\u0102" +
    "\001\002\000\004\103\376\001\002\000\006\107\uffbd\112" +
    "\377\001\002\000\004\123\u0101\001\002\000\004\107\uffbe" +
    "\001\002\000\004\104\366\001\002\000\004\043\u0103\001" +
    "\002\000\006\103\uffc2\112\u0104\001\002\000\006\043\374" +
    "\124\373\001\002\000\004\103\uffc3\001\002\000\006\043" +
    "\374\124\373\001\002\000\004\103\uffc5\001\002\000\010" +
    "\044\u010a\107\uffb9\112\u0109\001\002\000\004\123\u0101\001" +
    "\002\000\004\102\u010b\001\002\000\006\043\374\124\373" +
    "\001\002\000\004\103\u010d\001\002\000\006\107\uffbb\112" +
    "\u010e\001\002\000\004\123\u0101\001\002\000\004\107\uffbc" +
    "\001\002\000\004\107\uffba\001\002\000\004\107\uffbf\001" +
    "\002\000\004\123\063\001\002\000\004\101\u0114\001\002" +
    "\000\004\102\u0115\001\002\000\004\012\u0116\001\002\000" +
    "\010\043\u0138\123\063\124\u0137\001\002\000\010\012\u011a" +
    "\016\u0119\103\u0118\001\002\000\074\011\uff46\013\uff46\014" +
    "\uff46\015\uff46\017\uff46\020\uff46\021\uff46\022\uff46\023\uff46" +
    "\025\uff46\026\uff46\030\uff46\031\uff46\033\uff46\034\uff46\035" +
    "\uff46\036\uff46\037\uff46\040\uff46\041\uff46\042\uff46\074\uff46" +
    "\075\uff46\103\uff46\113\uff46\114\uff46\115\uff46\116\uff46\123" +
    "\uff46\001\002\000\004\111\u0131\001\002\000\010\043\u011c" +
    "\123\063\124\u011b\001\002\000\004\111\u012d\001\002\000" +
    "\006\043\u0122\123\u0123\001\002\000\004\111\u011e\001\002" +
    "\000\070\013\047\014\061\015\055\017\051\020\017\021" +
    "\041\022\043\023\023\025\037\026\033\030\035\031\057" +
    "\033\070\034\022\035\064\036\045\037\066\040\024\041" +
    "\036\042\042\074\015\075\026\113\067\114\016\115\065" +
    "\116\030\123\063\001\002\000\072\011\u0120\013\047\014" +
    "\061\015\055\017\051\020\017\021\041\022\043\023\023" +
    "\025\037\026\033\030\035\031\057\033\070\034\022\035" +
    "\064\036\045\037\066\040\024\041\036\042\042\074\015" +
    "\075\026\113\067\114\016\115\065\116\030\123\063\001" +
    "\002\000\004\107\u0121\001\002\000\010\012\uff4a\016\uff4a" +
    "\103\uff4a\001\002\000\004\111\u0129\001\002\000\004\043" +
    "\u0124\001\002\000\004\111\u0125\001\002\000\070\013\047" +
    "\014\061\015\055\017\051\020\017\021\041\022\043\023" +
    "\023\025\037\026\033\030\035\031\057\033\070\034\022" +
    "\035\064\036\045\037\066\040\024\041\036\042\042\074" +
    "\015\075\026\113\067\114\016\115\065\116\030\123\063" +
    "\001\002\000\072\011\u0127\013\047\014\061\015\055\017" +
    "\051\020\017\021\041\022\043\023\023\025\037\026\033" +
    "\030\035\031\057\033\070\034\022\035\064\036\045\037" +
    "\066\040\024\041\036\042\042\074\015\075\026\113\067" +
    "\114\016\115\065\116\030\123\063\001\002\000\004\107" +
    "\u0128\001\002\000\010\012\uff4b\016\uff4b\103\uff4b\001\002" +
    "\000\070\013\047\014\061\015\055\017\051\020\017\021" +
    "\041\022\043\023\023\025\037\026\033\030\035\031\057" +
    "\033\070\034\022\035\064\036\045\037\066\040\024\041" +
    "\036\042\042\074\015\075\026\113\067\114\016\115\065" +
    "\116\030\123\063\001\002\000\072\011\u012b\013\047\014" +
    "\061\015\055\017\051\020\017\021\041\022\043\023\023" +
    "\025\037\026\033\030\035\031\057\033\070\034\022\035" +
    "\064\036\045\037\066\040\024\041\036\042\042\074\015" +
    "\075\026\113\067\114\016\115\065\116\030\123\063\001" +
    "\002\000\004\107\u012c\001\002\000\010\012\uff49\016\uff49" +
    "\103\uff49\001\002\000\070\013\047\014\061\015\055\017" +
    "\051\020\017\021\041\022\043\023\023\025\037\026\033" +
    "\030\035\031\057\033\070\034\022\035\064\036\045\037" +
    "\066\040\024\041\036\042\042\074\015\075\026\113\067" +
    "\114\016\115\065\116\030\123\063\001\002\000\072\011" +
    "\u012f\013\047\014\061\015\055\017\051\020\017\021\041" +
    "\022\043\023\023\025\037\026\033\030\035\031\057\033" +
    "\070\034\022\035\064\036\045\037\066\040\024\041\036" +
    "\042\042\074\015\075\026\113\067\114\016\115\065\116" +
    "\030\123\063\001\002\000\004\107\u0130\001\002\000\010" +
    "\012\uff4c\016\uff4c\103\uff4c\001\002\000\070\013\047\014" +
    "\061\015\055\017\051\020\017\021\041\022\043\023\023" +
    "\025\037\026\033\030\035\031\057\033\070\034\022\035" +
    "\064\036\045\037\066\040\024\041\036\042\042\074\015" +
    "\075\026\113\067\114\016\115\065\116\030\123\063\001" +
    "\002\000\074\011\u0134\013\047\014\061\015\055\017\051" +
    "\020\017\021\041\022\043\023\023\025\037\026\033\030" +
    "\035\031\057\033\070\034\022\035\064\036\045\037\066" +
    "\040\024\041\036\042\042\074\015\075\026\103\u0133\113" +
    "\067\114\016\115\065\116\030\123\063\001\002\000\074" +
    "\011\uff47\013\uff47\014\uff47\015\uff47\017\uff47\020\uff47\021" +
    "\uff47\022\uff47\023\uff47\025\uff47\026\uff47\030\uff47\031\uff47" +
    "\033\uff47\034\uff47\035\uff47\036\uff47\037\uff47\040\uff47\041" +
    "\uff47\042\uff47\074\uff47\075\uff47\103\uff47\113\uff47\114\uff47" +
    "\115\uff47\116\uff47\123\uff47\001\002\000\004\107\u0135\001" +
    "\002\000\004\103\u0136\001\002\000\074\011\uff48\013\uff48" +
    "\014\uff48\015\uff48\017\uff48\020\uff48\021\uff48\022\uff48\023" +
    "\uff48\025\uff48\026\uff48\030\uff48\031\uff48\033\uff48\034\uff48" +
    "\035\uff48\036\uff48\037\uff48\040\uff48\041\uff48\042\uff48\074" +
    "\uff48\075\uff48\103\uff48\113\uff48\114\uff48\115\uff48\116\uff48" +
    "\123\uff48\001\002\000\004\111\u0149\001\002\000\006\043" +
    "\u013e\123\u013f\001\002\000\004\111\u013a\001\002\000\070" +
    "\013\047\014\061\015\055\017\051\020\017\021\041\022" +
    "\043\023\023\025\037\026\033\030\035\031\057\033\070" +
    "\034\022\035\064\036\045\037\066\040\024\041\036\042" +
    "\042\074\015\075\026\113\067\114\016\115\065\116\030" +
    "\123\063\001\002\000\072\011\u013c\013\047\014\061\015" +
    "\055\017\051\020\017\021\041\022\043\023\023\025\037" +
    "\026\033\030\035\031\057\033\070\034\022\035\064\036" +
    "\045\037\066\040\024\041\036\042\042\074\015\075\026" +
    "\113\067\114\016\115\065\116\030\123\063\001\002\000" +
    "\004\107\u013d\001\002\000\010\012\uff4d\016\uff4d\103\uff4d" +
    "\001\002\000\004\111\u0145\001\002\000\004\043\u0140\001" +
    "\002\000\004\111\u0141\001\002\000\070\013\047\014\061" +
    "\015\055\017\051\020\017\021\041\022\043\023\023\025" +
    "\037\026\033\030\035\031\057\033\070\034\022\035\064" +
    "\036\045\037\066\040\024\041\036\042\042\074\015\075" +
    "\026\113\067\114\016\115\065\116\030\123\063\001\002" +
    "\000\072\011\u0143\013\047\014\061\015\055\017\051\020" +
    "\017\021\041\022\043\023\023\025\037\026\033\030\035" +
    "\031\057\033\070\034\022\035\064\036\045\037\066\040" +
    "\024\041\036\042\042\074\015\075\026\113\067\114\016" +
    "\115\065\116\030\123\063\001\002\000\004\107\u0144\001" +
    "\002\000\010\012\uff4f\016\uff4f\103\uff4f\001\002\000\070" +
    "\013\047\014\061\015\055\017\051\020\017\021\041\022" +
    "\043\023\023\025\037\026\033\030\035\031\057\033\070" +
    "\034\022\035\064\036\045\037\066\040\024\041\036\042" +
    "\042\074\015\075\026\113\067\114\016\115\065\116\030" +
    "\123\063\001\002\000\072\011\u0147\013\047\014\061\015" +
    "\055\017\051\020\017\021\041\022\043\023\023\025\037" +
    "\026\033\030\035\031\057\033\070\034\022\035\064\036" +
    "\045\037\066\040\024\041\036\042\042\074\015\075\026" +
    "\113\067\114\016\115\065\116\030\123\063\001\002\000" +
    "\004\107\u0148\001\002\000\010\012\uff4e\016\uff4e\103\uff4e" +
    "\001\002\000\070\013\047\014\061\015\055\017\051\020" +
    "\017\021\041\022\043\023\023\025\037\026\033\030\035" +
    "\031\057\033\070\034\022\035\064\036\045\037\066\040" +
    "\024\041\036\042\042\074\015\075\026\113\067\114\016" +
    "\115\065\116\030\123\063\001\002\000\072\011\u014b\013" +
    "\047\014\061\015\055\017\051\020\017\021\041\022\043" +
    "\023\023\025\037\026\033\030\035\031\057\033\070\034" +
    "\022\035\064\036\045\037\066\040\024\041\036\042\042" +
    "\074\015\075\026\113\067\114\016\115\065\116\030\123" +
    "\063\001\002\000\004\107\u014c\001\002\000\010\012\uff50" +
    "\016\uff50\103\uff50\001\002\000\006\025\u0150\123\063\001" +
    "\002\000\004\107\u0156\001\002\000\006\044\u0154\107\uff7a" +
    "\001\002\000\004\123\u0151\001\002\000\004\044\u0152\001" +
    "\002\000\004\124\u0153\001\002\000\004\107\uff7b\001\002" +
    "\000\004\124\u0155\001\002\000\004\107\uff79\001\002\000" +
    "\020\043\304\054\275\076\300\077\276\100\277\123\063" +
    "\124\302\001\002\000\004\107\u0158\001\002\000\010\074" +
    "\015\075\026\123\063\001\002\000\004\101\u015a\001\002" +
    "\000\004\102\u015b\001\002\000\070\013\047\014\061\015" +
    "\055\017\051\020\017\021\041\022\043\023\023\025\037" +
    "\026\033\030\035\031\057\033\070\034\022\035\064\036" +
    "\045\037\066\040\024\041\036\042\042\074\015\075\026" +
    "\113\067\114\016\115\065\116\030\123\063\001\002\000" +
    "\072\013\047\014\061\015\055\017\051\020\017\021\041" +
    "\022\043\023\023\025\037\026\033\030\035\031\057\033" +
    "\070\034\022\035\064\036\045\037\066\040\024\041\036" +
    "\042\042\074\015\075\026\103\u015d\113\067\114\016\115" +
    "\065\116\030\123\063\001\002\000\074\011\uff60\013\uff60" +
    "\014\uff60\015\uff60\017\uff60\020\uff60\021\uff60\022\uff60\023" +
    "\uff60\025\uff60\026\uff60\030\uff60\031\uff60\033\uff60\034\uff60" +
    "\035\uff60\036\uff60\037\uff60\040\uff60\041\uff60\042\uff60\074" +
    "\uff60\075\uff60\103\uff60\113\uff60\114\uff60\115\uff60\116\uff60" +
    "\123\uff60\001\002\000\004\107\u0161\001\002\000\004\107" +
    "\u0160\001\002\000\074\011\uffa6\013\uffa6\014\uffa6\015\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\025\uffa6\026" +
    "\uffa6\030\uffa6\031\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\042\uffa6\074\uffa6\075\uffa6\103" +
    "\uffa6\113\uffa6\114\uffa6\115\uffa6\116\uffa6\123\uffa6\001\002" +
    "\000\004\107\uffc0\001\002\000\004\107\u0163\001\002\000" +
    "\074\011\uffab\013\uffab\014\uffab\015\uffab\017\uffab\020\uffab" +
    "\021\uffab\022\uffab\023\uffab\025\uffab\026\uffab\030\uffab\031" +
    "\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab" +
    "\041\uffab\042\uffab\074\uffab\075\uffab\103\uffab\113\uffab\114" +
    "\uffab\115\uffab\116\uffab\123\uffab\001\002\000\004\107\u0167" +
    "\001\002\000\004\107\u0166\001\002\000\074\011\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\074\uffb8\075\uffb8\103\uffb8\113\uffb8\114\uffb8\115\uffb8\116" +
    "\uffb8\123\uffb8\001\002\000\004\107\uffc1\001\002\000\020" +
    "\043\304\054\275\076\300\077\276\100\277\123\063\124" +
    "\302\001\002\000\004\101\u016a\001\002\000\004\102\u016b" +
    "\001\002\000\070\013\047\014\061\015\055\017\051\020" +
    "\017\021\041\022\043\023\023\025\037\026\033\030\035" +
    "\031\057\033\070\034\022\035\064\036\045\037\066\040" +
    "\024\041\036\042\042\074\015\075\026\113\067\114\016" +
    "\115\065\116\030\123\063\001\002\000\072\013\047\014" +
    "\061\015\055\017\051\020\017\021\041\022\043\023\023" +
    "\025\037\026\033\030\035\031\057\033\070\034\022\035" +
    "\064\036\045\037\066\040\024\041\036\042\042\074\015" +
    "\075\026\103\u016d\113\067\114\016\115\065\116\030\123" +
    "\063\001\002\000\074\011\uff5f\013\uff5f\014\uff5f\015\uff5f" +
    "\017\uff5f\020\uff5f\021\uff5f\022\uff5f\023\uff5f\025\uff5f\026" +
    "\uff5f\030\uff5f\031\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f" +
    "\037\uff5f\040\uff5f\041\uff5f\042\uff5f\074\uff5f\075\uff5f\103" +
    "\uff5f\113\uff5f\114\uff5f\115\uff5f\116\uff5f\123\uff5f\001\002" +
    "\000\004\107\u0171\001\002\000\004\107\u0170\001\002\000" +
    "\074\011\uff45\013\uff45\014\uff45\015\uff45\017\uff45\020\uff45" +
    "\021\uff45\022\uff45\023\uff45\025\uff45\026\uff45\030\uff45\031" +
    "\uff45\033\uff45\034\uff45\035\uff45\036\uff45\037\uff45\040\uff45" +
    "\041\uff45\042\uff45\074\uff45\075\uff45\103\uff45\113\uff45\114" +
    "\uff45\115\uff45\116\uff45\123\uff45\001\002\000\074\011\uff44" +
    "\013\uff44\014\uff44\015\uff44\017\uff44\020\uff44\021\uff44\022" +
    "\uff44\023\uff44\025\uff44\026\uff44\030\uff44\031\uff44\033\uff44" +
    "\034\uff44\035\uff44\036\uff44\037\uff44\040\uff44\041\uff44\042" +
    "\uff44\074\uff44\075\uff44\103\uff44\113\uff44\114\uff44\115\uff44" +
    "\116\uff44\123\uff44\001\002\000\074\011\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\025\uffe5\026\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\074\uffe5" +
    "\075\uffe5\103\uffe5\113\uffe5\114\uffe5\115\uffe5\116\uffe5\123" +
    "\uffe5\001\002\000\004\123\072\001\002\000\004\123\072" +
    "\001\002\000\004\107\u0176\001\002\000\074\011\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\025\uffb1\026\uffb1\030\uffb1\031\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\074\uffb1\075\uffb1\103\uffb1\113\uffb1\114\uffb1\115\uffb1\116" +
    "\uffb1\123\uffb1\001\002\000\004\107\u0178\001\002\000\074" +
    "\011\uffac\013\uffac\014\uffac\015\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\025\uffac\026\uffac\030\uffac\031\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\074\uffac\075\uffac\103\uffac\113\uffac\114\uffac" +
    "\115\uffac\116\uffac\123\uffac\001\002\000\010\043\u017a\122" +
    "\u017c\123\063\001\002\000\006\043\u0181\123\u0182\001\002" +
    "\000\004\107\u0180\001\002\000\004\107\uff55\001\002\000" +
    "\006\065\u017e\107\uff5c\001\002\000\010\043\u017a\122\u017c" +
    "\123\063\001\002\000\004\107\uff56\001\002\000\074\011" +
    "\uff5d\013\uff5d\014\uff5d\015\uff5d\017\uff5d\020\uff5d\021\uff5d" +
    "\022\uff5d\023\uff5d\025\uff5d\026\uff5d\030\uff5d\031\uff5d\033" +
    "\uff5d\034\uff5d\035\uff5d\036\uff5d\037\uff5d\040\uff5d\041\uff5d" +
    "\042\uff5d\074\uff5d\075\uff5d\103\uff5d\113\uff5d\114\uff5d\115" +
    "\uff5d\116\uff5d\123\uff5d\001\002\000\006\065\u0188\107\uff59" +
    "\001\002\000\006\043\u0183\123\063\001\002\000\006\065" +
    "\u0186\107\uff5b\001\002\000\004\043\u0185\001\002\000\004" +
    "\107\uff5a\001\002\000\010\043\u017a\122\u017c\123\063\001" +
    "\002\000\004\107\uff58\001\002\000\010\043\u017a\122\u017c" +
    "\123\063\001\002\000\004\107\uff57\001\002\000\006\101" +
    "\uff73\107\uff73\001\002\000\004\002\ufff2\001\002\000\004" +
    "\100\u018d\001\002\000\004\123\072\001\002\000\004\101" +
    "\u018f\001\002\000\006\102\u0190\107\u0191\001\002\000\070" +
    "\013\047\014\061\015\055\017\051\020\017\021\041\022" +
    "\043\023\023\025\037\026\033\030\035\031\057\033\070" +
    "\034\022\035\064\036\045\037\066\040\024\041\036\042" +
    "\042\074\015\075\026\113\067\114\016\115\065\116\030" +
    "\123\063\001\002\000\074\011\uff43\013\uff43\014\uff43\015" +
    "\uff43\017\uff43\020\uff43\021\uff43\022\uff43\023\uff43\025\uff43" +
    "\026\uff43\030\uff43\031\uff43\033\uff43\034\uff43\035\uff43\036" +
    "\uff43\037\uff43\040\uff43\041\uff43\042\uff43\074\uff43\075\uff43" +
    "\103\uff43\113\uff43\114\uff43\115\uff43\116\uff43\123\uff43\001" +
    "\002\000\072\013\047\014\061\015\055\017\051\020\017" +
    "\021\041\022\043\023\023\025\037\026\033\030\035\031" +
    "\057\033\070\034\022\035\064\036\045\037\066\040\024" +
    "\041\036\042\042\074\015\075\026\103\u0193\113\067\114" +
    "\016\115\065\116\030\123\063\001\002\000\074\011\uff42" +
    "\013\uff42\014\uff42\015\uff42\017\uff42\020\uff42\021\uff42\022" +
    "\uff42\023\uff42\025\uff42\026\uff42\030\uff42\031\uff42\033\uff42" +
    "\034\uff42\035\uff42\036\uff42\037\uff42\040\uff42\041\uff42\042" +
    "\uff42\074\uff42\075\uff42\103\uff42\113\uff42\114\uff42\115\uff42" +
    "\116\uff42\123\uff42\001\002\000\020\043\304\054\275\076" +
    "\300\077\276\100\277\123\063\124\302\001\002\000\004" +
    "\101\u0196\001\002\000\004\102\u0197\001\002\000\070\013" +
    "\047\014\061\015\055\017\051\020\017\021\041\022\043" +
    "\023\023\025\037\026\033\030\035\031\057\033\070\034" +
    "\022\035\064\036\045\037\066\040\024\041\036\042\042" +
    "\074\015\075\026\113\067\114\016\115\065\116\030\123" +
    "\063\001\002\000\072\013\047\014\061\015\055\017\051" +
    "\020\017\021\041\022\043\023\023\025\037\026\033\030" +
    "\035\031\057\033\070\034\022\035\064\036\045\037\066" +
    "\040\024\041\036\042\042\074\015\075\026\103\u0199\113" +
    "\067\114\016\115\065\116\030\123\063\001\002\000\076" +
    "\011\uff7e\013\uff7e\014\uff7e\015\uff7e\017\uff7e\020\uff7e\021" +
    "\uff7e\022\uff7e\023\uff7e\024\u019a\025\uff7e\026\uff7e\030\uff7e" +
    "\031\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040" +
    "\uff7e\041\uff7e\042\uff7e\074\uff7e\075\uff7e\103\uff7e\113\uff7e" +
    "\114\uff7e\115\uff7e\116\uff7e\123\uff7e\001\002\000\006\023" +
    "\023\102\u019b\001\002\000\070\013\047\014\061\015\055" +
    "\017\051\020\017\021\041\022\043\023\023\025\037\026" +
    "\033\030\035\031\057\033\070\034\022\035\064\036\045" +
    "\037\066\040\024\041\036\042\042\074\015\075\026\113" +
    "\067\114\016\115\065\116\030\123\063\001\002\000\074" +
    "\011\uff7c\013\uff7c\014\uff7c\015\uff7c\017\uff7c\020\uff7c\021" +
    "\uff7c\022\uff7c\023\uff7c\025\uff7c\026\uff7c\030\uff7c\031\uff7c" +
    "\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041" +
    "\uff7c\042\uff7c\074\uff7c\075\uff7c\103\uff7c\113\uff7c\114\uff7c" +
    "\115\uff7c\116\uff7c\123\uff7c\001\002\000\072\013\047\014" +
    "\061\015\055\017\051\020\017\021\041\022\043\023\023" +
    "\025\037\026\033\030\035\031\057\033\070\034\022\035" +
    "\064\036\045\037\066\040\024\041\036\042\042\074\015" +
    "\075\026\103\u019e\113\067\114\016\115\065\116\030\123" +
    "\063\001\002\000\074\011\uff7d\013\uff7d\014\uff7d\015\uff7d" +
    "\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\025\uff7d\026" +
    "\uff7d\030\uff7d\031\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d" +
    "\037\uff7d\040\uff7d\041\uff7d\042\uff7d\074\uff7d\075\uff7d\103" +
    "\uff7d\113\uff7d\114\uff7d\115\uff7d\116\uff7d\123\uff7d\001\002" +
    "\000\004\123\072\001\002\000\004\025\u01a8\001\002\000" +
    "\004\025\u01a5\001\002\000\004\123\072\001\002\000\004" +
    "\107\u01a4\001\002\000\074\011\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\025\uffb6" +
    "\026\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\074\uffb6\075\uffb6" +
    "\103\uffb6\113\uffb6\114\uffb6\115\uffb6\116\uffb6\123\uffb6\001" +
    "\002\000\004\123\072\001\002\000\004\107\u01a7\001\002" +
    "\000\074\011\uffb2\013\uffb2\014\uffb2\015\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2\026\uffb2\030\uffb2" +
    "\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\074\uffb2\075\uffb2\103\uffb2\113\uffb2" +
    "\114\uffb2\115\uffb2\116\uffb2\123\uffb2\001\002\000\004\123" +
    "\072\001\002\000\004\107\u01aa\001\002\000\074\011\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\025\uffb0\026\uffb0\030\uffb0\031\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\074\uffb0\075\uffb0\103\uffb0\113\uffb0\114\uffb0\115\uffb0" +
    "\116\uffb0\123\uffb0\001\002\000\004\107\u01ac\001\002\000" +
    "\074\011\uffa7\013\uffa7\014\uffa7\015\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\025\uffa7\026\uffa7\030\uffa7\031" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\074\uffa7\075\uffa7\103\uffa7\113\uffa7\114" +
    "\uffa7\115\uffa7\116\uffa7\123\uffa7\001\002\000\074\011\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\025\uffa4\026\uffa4\030\uffa4\031\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\074\uffa4\075\uffa4\103\uffa4\113\uffa4\114\uffa4\115\uffa4" +
    "\116\uffa4\123\uffa4\001\002\000\004\107\u01af\001\002\000" +
    "\074\011\uffaf\013\uffaf\014\uffaf\015\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\025\uffaf\026\uffaf\030\uffaf\031" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\074\uffaf\075\uffaf\103\uffaf\113\uffaf\114" +
    "\uffaf\115\uffaf\116\uffaf\123\uffaf\001\002\000\004\123\u01b1" +
    "\001\002\000\004\101\u01b2\001\002\000\004\107\u01b3\001" +
    "\002\000\074\011\uff3e\013\uff3e\014\uff3e\015\uff3e\017\uff3e" +
    "\020\uff3e\021\uff3e\022\uff3e\023\uff3e\025\uff3e\026\uff3e\030" +
    "\uff3e\031\uff3e\033\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e" +
    "\040\uff3e\041\uff3e\042\uff3e\074\uff3e\075\uff3e\103\uff3e\113" +
    "\uff3e\114\uff3e\115\uff3e\116\uff3e\123\uff3e\001\002\000\006" +
    "\101\uff74\107\uff74\001\002\000\004\002\001\001\002\000" +
    "\004\123\u01c5\001\002\000\006\043\u01b8\056\u01b9\001\002" +
    "\000\004\123\u01c1\001\002\000\006\010\u01bb\123\u01ba\001" +
    "\002\000\006\055\u01bd\110\u01be\001\002\000\004\055\u01bc" +
    "\001\002\000\010\005\ufffd\025\ufffd\117\ufffd\001\002\000" +
    "\010\005\ufffe\025\ufffe\117\ufffe\001\002\000\004\123\u01bf" +
    "\001\002\000\004\055\u01c0\001\002\000\010\005\000\025" +
    "\000\117\000\001\002\000\004\110\u01c2\001\002\000\004" +
    "\123\u01c3\001\002\000\004\043\u01c4\001\002\000\010\005" +
    "\uffff\025\uffff\117\uffff\001\002\000\012\005\ufffb\025\ufffb" +
    "\117\ufffb\124\u01c6\001\002\000\010\005\ufffc\025\ufffc\117" +
    "\ufffc\001\002\000\004\101\u01c8\001\002\000\004\102\u01c9" +
    "\001\002\000\070\013\047\014\061\015\055\017\051\020" +
    "\017\021\041\022\043\023\023\025\037\026\033\030\035" +
    "\031\057\033\070\034\022\035\064\036\045\037\066\040" +
    "\024\041\036\042\042\074\015\075\026\113\067\114\016" +
    "\115\065\116\030\123\063\001\002\000\072\013\047\014" +
    "\061\015\055\017\051\020\017\021\041\022\043\023\023" +
    "\025\037\026\033\030\035\031\057\033\070\034\022\035" +
    "\064\036\045\037\066\040\024\041\036\042\042\074\015" +
    "\075\026\103\u01cb\113\067\114\016\115\065\116\030\123" +
    "\063\001\002\000\004\002\ufff1\001\002\000\004\120\u01e6" +
    "\001\002\000\006\006\u01d6\007\u01d5\001\002\000\004\106" +
    "\u01cf\001\002\000\004\100\u01d0\001\002\000\004\101\u01d1" +
    "\001\002\000\004\102\u01d2\001\002\000\070\013\047\014" +
    "\061\015\055\017\051\020\017\021\041\022\043\023\023" +
    "\025\037\026\033\030\035\031\057\033\070\034\022\035" +
    "\064\036\045\037\066\040\024\041\036\042\042\074\015" +
    "\075\026\113\067\114\016\115\065\116\030\123\063\001" +
    "\002\000\072\013\047\014\061\015\055\017\051\020\017" +
    "\021\041\022\043\023\023\025\037\026\033\030\035\031" +
    "\057\033\070\034\022\035\064\036\045\037\066\040\024" +
    "\041\036\042\042\074\015\075\026\103\u01d4\113\067\114" +
    "\016\115\065\116\030\123\063\001\002\000\004\002\ufff3" +
    "\001\002\000\004\123\u01e4\001\002\000\006\043\u01d7\056" +
    "\u01d8\001\002\000\004\123\u01e0\001\002\000\006\010\u01da" +
    "\123\u01d9\001\002\000\006\055\u01dc\110\u01dd\001\002\000" +
    "\004\055\u01db\001\002\000\010\005\ufff5\025\ufff5\117\ufff5" +
    "\001\002\000\010\005\ufff6\025\ufff6\117\ufff6\001\002\000" +
    "\004\123\u01de\001\002\000\004\055\u01df\001\002\000\010" +
    "\005\ufff8\025\ufff8\117\ufff8\001\002\000\004\110\u01e1\001" +
    "\002\000\004\123\u01e2\001\002\000\004\043\u01e3\001\002" +
    "\000\010\005\ufff7\025\ufff7\117\ufff7\001\002\000\012\005" +
    "\ufff9\025\ufff9\117\ufff9\124\u01e5\001\002\000\010\005\ufffa" +
    "\025\ufffa\117\ufffa\001\002\000\004\121\u01e7\001\002\000" +
    "\004\107\u01e8\001\002\000\004\025\u01e9\001\002\000\004" +
    "\106\u01ea\001\002\000\004\100\u01eb\001\002\000\004\101" +
    "\u01ec\001\002\000\004\102\u01ed\001\002\000\070\013\047" +
    "\014\061\015\055\017\051\020\017\021\041\022\043\023" +
    "\023\025\037\026\033\030\035\031\057\033\070\034\022" +
    "\035\064\036\045\037\066\040\024\041\036\042\042\074" +
    "\015\075\026\113\067\114\016\115\065\116\030\123\063" +
    "\001\002\000\072\013\047\014\061\015\055\017\051\020" +
    "\017\021\041\022\043\023\023\025\037\026\033\030\035" +
    "\031\057\033\070\034\022\035\064\036\045\037\066\040" +
    "\024\041\036\042\042\074\015\075\026\103\u01ef\113\067" +
    "\114\016\115\065\116\030\123\063\001\002\000\004\002" +
    "\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ed\000\006\002\006\013\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\024\004\055\005\037\006\030" +
    "\016\033\017\061\020\031\022\057\024\045\027\052\031" +
    "\020\033\053\034\043\035\047\036\070\037\026\040\051" +
    "\041\017\001\001\000\004\033\u01b3\001\001\000\002\001" +
    "\001\000\004\012\u01ad\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\172\005\164\006\161\016\163\017\174" +
    "\020\162\022\173\024\166\027\171\031\020\033\053\034" +
    "\165\035\167\036\175\037\160\040\170\041\157\001\001" +
    "\000\004\033\u0189\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\u0164\032\u0163\001\001\000\002\001\001\000\004" +
    "\012\u0161\001\001\000\006\012\u015e\032\u015d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\363\032\361\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\111\001\001" +
    "\000\002\001\001\000\004\012\113\001\001\000\002\001" +
    "\001\000\004\012\115\001\001\000\002\001\001\000\004" +
    "\012\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\143\001\001\000\002\001\001\000" +
    "\004\012\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\147" +
    "\033\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\152\033\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\155\004\055\005" +
    "\037\006\030\016\033\017\061\020\031\022\057\024\045" +
    "\027\052\031\020\033\053\034\043\035\047\036\070\037" +
    "\026\040\051\041\017\001\001\000\044\004\172\005\164" +
    "\006\161\016\163\017\174\020\162\022\173\024\166\027" +
    "\171\031\020\033\053\034\165\035\167\036\175\037\160" +
    "\040\170\041\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\220\001\001\000\004\012\216\001\001\000\004\012" +
    "\214\001\001\000\004\012\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\264\001\001" +
    "\000\002\001\001\000\004\033\262\001\001\000\004\033" +
    "\260\001\001\000\002\001\001\000\004\033\256\001\001" +
    "\000\004\033\254\001\001\000\004\033\237\001\001\000" +
    "\004\021\250\001\001\000\004\021\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\266\004" +
    "\055\005\037\006\030\016\033\017\061\020\031\022\057" +
    "\024\045\027\052\031\020\033\053\034\043\035\047\036" +
    "\070\037\026\040\051\041\017\001\001\000\044\004\172" +
    "\005\164\006\161\016\163\017\174\020\162\022\173\024" +
    "\166\027\171\031\020\033\053\034\165\035\167\036\175" +
    "\037\160\040\170\041\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\272\010\302\014\273\033\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\344\033\300\001\001\000\002\001\001\000\010\007\340" +
    "\010\341\033\300\001\001\000\002\001\001\000\004\021" +
    "\335\001\001\000\004\021\332\001\001\000\004\011\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\326\033\300\001\001" +
    "\000\002\001\001\000\012\007\272\010\302\014\323\033" +
    "\300\001\001\000\012\007\272\010\302\014\322\033\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\331\033\300\001\001\000\006\010\327\033\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\307\001\001\000\002\001\001\000\010\007\351\010" +
    "\341\033\300\001\001\000\004\011\345\001\001\000\006" +
    "\010\347\033\300\001\001\000\006\010\350\033\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\272\010\302\014\360\033\300\001\001\000\012" +
    "\007\272\010\302\014\357\033\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\374\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\377\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\u0104\001\001\000\002\001\001" +
    "\000\004\030\u0106\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\u010f\001\001\000\002\001\001\000\004" +
    "\030\u010b\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u010e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\u0112\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\u0116\001\001\000\004" +
    "\033\u0138\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u011c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\u011e\004" +
    "\055\005\037\006\030\016\033\017\061\020\031\022\057" +
    "\024\045\027\052\031\020\033\053\034\043\035\047\036" +
    "\070\037\026\040\051\041\017\001\001\000\044\004\172" +
    "\005\164\006\161\016\163\017\174\020\162\022\173\024" +
    "\166\027\171\031\020\033\053\034\165\035\167\036\175" +
    "\037\160\040\170\041\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\u0125\004\055\005\037\006\030\016" +
    "\033\017\061\020\031\022\057\024\045\027\052\031\020" +
    "\033\053\034\043\035\047\036\070\037\026\040\051\041" +
    "\017\001\001\000\044\004\172\005\164\006\161\016\163" +
    "\017\174\020\162\022\173\024\166\027\171\031\020\033" +
    "\053\034\165\035\167\036\175\037\160\040\170\041\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\u0129\004\055\005\037\006\030\016\033\017\061\020\031" +
    "\022\057\024\045\027\052\031\020\033\053\034\043\035" +
    "\047\036\070\037\026\040\051\041\017\001\001\000\044" +
    "\004\172\005\164\006\161\016\163\017\174\020\162\022" +
    "\173\024\166\027\171\031\020\033\053\034\165\035\167" +
    "\036\175\037\160\040\170\041\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\u012d\004\055\005\037" +
    "\006\030\016\033\017\061\020\031\022\057\024\045\027" +
    "\052\031\020\033\053\034\043\035\047\036\070\037\026" +
    "\040\051\041\017\001\001\000\044\004\172\005\164\006" +
    "\161\016\163\017\174\020\162\022\173\024\166\027\171" +
    "\031\020\033\053\034\165\035\167\036\175\037\160\040" +
    "\170\041\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\u0131\004\055\005\037\006\030\016\033\017" +
    "\061\020\031\022\057\024\045\027\052\031\020\033\053" +
    "\034\043\035\047\036\070\037\026\040\051\041\017\001" +
    "\001\000\044\004\172\005\164\006\161\016\163\017\174" +
    "\020\162\022\173\024\166\027\171\031\020\033\053\034" +
    "\165\035\167\036\175\037\160\040\170\041\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\u013a\004\055\005\037\006\030\016" +
    "\033\017\061\020\031\022\057\024\045\027\052\031\020" +
    "\033\053\034\043\035\047\036\070\037\026\040\051\041" +
    "\017\001\001\000\044\004\172\005\164\006\161\016\163" +
    "\017\174\020\162\022\173\024\166\027\171\031\020\033" +
    "\053\034\165\035\167\036\175\037\160\040\170\041\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\u0141" +
    "\004\055\005\037\006\030\016\033\017\061\020\031\022" +
    "\057\024\045\027\052\031\020\033\053\034\043\035\047" +
    "\036\070\037\026\040\051\041\017\001\001\000\044\004" +
    "\172\005\164\006\161\016\163\017\174\020\162\022\173" +
    "\024\166\027\171\031\020\033\053\034\165\035\167\036" +
    "\175\037\160\040\170\041\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\u0145\004\055\005\037\006" +
    "\030\016\033\017\061\020\031\022\057\024\045\027\052" +
    "\031\020\033\053\034\043\035\047\036\070\037\026\040" +
    "\051\041\017\001\001\000\044\004\172\005\164\006\161" +
    "\016\163\017\174\020\162\022\173\024\166\027\171\031" +
    "\020\033\053\034\165\035\167\036\175\037\160\040\170" +
    "\041\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\u0149\004\055\005\037\006\030\016\033\017\061" +
    "\020\031\022\057\024\045\027\052\031\020\033\053\034" +
    "\043\035\047\036\070\037\026\040\051\041\017\001\001" +
    "\000\044\004\172\005\164\006\161\016\163\017\174\020" +
    "\162\022\173\024\166\027\171\031\020\033\053\034\165" +
    "\035\167\036\175\037\160\040\170\041\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\u014d\033\u014e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\272\010" +
    "\302\014\u0156\033\300\001\001\000\002\001\001\000\006" +
    "\016\u0158\033\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\u015b\004\055\005\037\006\030\016\033" +
    "\017\061\020\031\022\057\024\045\027\052\031\020\033" +
    "\053\034\043\035\047\036\070\037\026\040\051\041\017" +
    "\001\001\000\044\004\172\005\164\006\161\016\163\017" +
    "\174\020\162\022\173\024\166\027\171\031\020\033\053" +
    "\034\165\035\167\036\175\037\160\040\170\041\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\272\010\302\014" +
    "\u0168\033\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\u016b\004\055\005\037\006\030\016\033\017" +
    "\061\020\031\022\057\024\045\027\052\031\020\033\053" +
    "\034\043\035\047\036\070\037\026\040\051\041\017\001" +
    "\001\000\044\004\172\005\164\006\161\016\163\017\174" +
    "\020\162\022\173\024\166\027\171\031\020\033\053\034" +
    "\165\035\167\036\175\037\160\040\170\041\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0176\001\001\000\004\012\u0174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\u017a\033\u017c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\u017e\033\u017c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u0183\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\u0186\033\u017c\001\001\000\002\001\001\000\006\023\u0188" +
    "\033\u017c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u018d\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\u0191\004" +
    "\055\005\037\006\030\016\033\017\061\020\031\022\057" +
    "\024\045\027\052\031\020\033\053\034\043\035\047\036" +
    "\070\037\026\040\051\041\017\001\001\000\002\001\001" +
    "\000\044\004\172\005\164\006\161\016\163\017\174\020" +
    "\162\022\173\024\166\027\171\031\020\033\053\034\165" +
    "\035\167\036\175\037\160\040\170\041\157\001\001\000" +
    "\002\001\001\000\012\007\272\010\302\014\u0194\033\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\u0197\004\055\005\037\006\030\016\033\017\061\020\031" +
    "\022\057\024\045\027\052\031\020\033\053\034\043\035" +
    "\047\036\070\037\026\040\051\041\017\001\001\000\044" +
    "\004\172\005\164\006\161\016\163\017\174\020\162\022" +
    "\173\024\166\027\171\031\020\033\053\034\165\035\167" +
    "\036\175\037\160\040\170\041\157\001\001\000\002\001" +
    "\001\000\004\005\u019b\001\001\000\046\003\u019c\004\055" +
    "\005\037\006\030\016\033\017\061\020\031\022\057\024" +
    "\045\027\052\031\020\033\053\034\043\035\047\036\070" +
    "\037\026\040\051\041\017\001\001\000\002\001\001\000" +
    "\044\004\172\005\164\006\161\016\163\017\174\020\162" +
    "\022\173\024\166\027\171\031\020\033\053\034\165\035" +
    "\167\036\175\037\160\040\170\041\157\001\001\000\002" +
    "\001\001\000\004\012\u01aa\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u01a2\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u01a5\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u01a8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\u01c9" +
    "\004\055\005\037\006\030\016\033\017\061\020\031\022" +
    "\057\024\045\027\052\031\020\033\053\034\043\035\047" +
    "\036\070\037\026\040\051\041\017\001\001\000\044\004" +
    "\172\005\164\006\161\016\163\017\174\020\162\022\173" +
    "\024\166\027\171\031\020\033\053\034\165\035\167\036" +
    "\175\037\160\040\170\041\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\u01d2\004\055\005\037\006\030\016\033\017\061\020" +
    "\031\022\057\024\045\027\052\031\020\033\053\034\043" +
    "\035\047\036\070\037\026\040\051\041\017\001\001\000" +
    "\044\004\172\005\164\006\161\016\163\017\174\020\162" +
    "\022\173\024\166\027\171\031\020\033\053\034\165\035" +
    "\167\036\175\037\160\040\170\041\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\u01ed\004\055" +
    "\005\037\006\030\016\033\017\061\020\031\022\057\024" +
    "\045\027\052\031\020\033\053\034\043\035\047\036\070" +
    "\037\026\040\051\041\017\001\001\000\044\004\172\005" +
    "\164\006\161\016\163\017\174\020\162\022\173\024\166" +
    "\027\171\031\020\033\053\034\165\035\167\036\175\037" +
    "\160\040\170\041\157\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // SCANF ::= ScanF Parent_a Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // PRINTF ::= PrintF Parent_a Comillas IDENTIFICADORES Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // PRINTF ::= PrintF Parent_a Comillas IDENTIFICADORES Comillas Coma Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // STRUCT ::= Struct Identificador Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("STRUCT",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // VOID ::= Void Identificador Parent_a DECLARACION_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VOID",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // VOID ::= Void Identificador Parent_a DECLARACION_ANIDADA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VOID",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // RETURN ::= Return Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // RETURN ::= Return Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // CASE ::= CASE Case Comillas Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CASE ::= CASE Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CASE ::= CASE Case Comillas Identificador Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CASE ::= CASE Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CASE ::= Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CASE ::= Case Comillas Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CASE ::= Case Comillas Identificador Comillas DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CASE ::= Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CONTINUE ::= Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONTINUE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CIN ::= Cin DesplazamientoD ENTRADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ENTRADA ::= IDENTIFICADORES DesplazamientoD ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ENTRADA ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SALIDA ::= Endl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SALIDA ::= IDENTIFICADORES DesplazamientoI SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SALIDA ::= Comillas Comillas DesplazamientoI SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SALIDA ::= Comillas Identificador Comillas DesplazamientoI SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SALIDA ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SALIDA ::= Comillas Identificador IDENTIFICADORES Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SALIDA ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SALIDA ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // COUT ::= Cout DesplazamientoI SALIDA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FOR ::= For Parent_a FOR_1 P_coma SENTENCIA_BOOLEANA_ANIDADA P_coma OPERACIONES_COMPLEMENTARIAS Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES AsignacionModulo Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES AsignacionDivision Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES AsignacionMultiplicacion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES AsignacionResta Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES AsignacionSuma Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES AsignacionModulo IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES AsignacionDivision IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES AsignacionMultiplicacion IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES AsignacionResta IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES AsignacionSuma IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPERACIONES_COMPLEMENTARIAS ::= Decremento IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERACIONES_COMPLEMENTARIAS ::= Incremento IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // IDENTIFICADORES ::= Identificador Corchete_a Identificador Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // IDENTIFICADORES ::= Identificador Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // IDENTIFICADORES ::= Identificador IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // FOR_1 ::= IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_1",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // FOR_1 ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_1",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FOR_1 ::= Int Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_1",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE Disyuncion SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE Conjuncion SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA Disyuncion SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA Conjuncion SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negacion SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negacion Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_BOOLEANA_COMPUESTA ::= Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negacion SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negacion SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negacion SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negacion SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA_BOOLEANA_SIMPLE ::= Parent_a SENTENCIA_BOOLEANA_SIMPLE Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA_BOOLEANA_SIMPLE ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_BOOLEANA_SIMPLE ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_BOOLEANA_SIMPLE ::= False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_BOOLEANA_SIMPLE ::= True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERADORES_RELACIONALES ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPERADORES_RELACIONALES ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERADORES_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERADORES_RELACIONALES ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERADORES_RELACIONALES ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERADORES_RELACIONALES ::= EsIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERADORES_RELACIONALES ::= DisyuncionBit 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERADORES_RELACIONALES ::= ConjuncionBit 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERADORES_ARITMETICOS ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERADORES_ARITMETICOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERADORES_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERADORES_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERADORES_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION ::= DECLARACION_ARREGLO_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION ::= Bool DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION ::= Cadena DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Unsigned Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= Const Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= Const Float DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= Float DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= Long Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= Const Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Typedef Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Unsigned Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Unsigned Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= Const Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= Typedef Unsigned Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= Unsigned Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= Typedef Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_ARREGLO ::= Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION_ARREGLO ::= Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_ARREGLO_ANIDADA ::= Char DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_ARREGLO_ANIDADA ::= Cadena DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_ARREGLO_ANIDADA ::= Int DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CREACION_ARREGLO ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CREACION_ARREGLO ::= Comillas Identificador Comillas Coma CREACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CREACION_ARREGLO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CREACION_ARREGLO ::= Numero Coma CREACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_ANIDADA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_ANIDADA ::= Identificador Igual False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_ANIDADA ::= Identificador Igual True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_ANIDADA ::= Identificador Igual False Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_ANIDADA ::= Identificador Igual True Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_ANIDADA ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_ANIDADA ::= Identificador Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Identificador Comillas Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Comillas Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_ANIDADA ::= Identificador Igual Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_ANIDADA ::= Identificador Igual Numero Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_ANIDADA ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= SENTENCIA RETURN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= VOID 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= SENTENCIA VOID 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= SENTENCIA STRUCT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA CONTINUE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= IMPORTACION Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= IMPORTACION Using Namespace Std P_coma Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IMPORTACION ::= IMPORTACION Numeral Include Comillas Identificador Punto Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTACION ::= IMPORTACION Numeral Define Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTACION ::= IMPORTACION Numeral Define Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTACION ::= Numeral Define Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACION ::= Numeral Define Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACION ::= Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACION ::= Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACION ::= Numeral Include Comillas Identificador Punto Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // IMPORTACION ::= Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

